Program RoguesDenCooker;
  {$IFDEF RAYMONDPOWNS}{wrappers} function FloodFillTPAWrap(const TPA: TPointArray): T2DPointArray; var tempATPA: T2DPointArray; begin tempATPA:= FloodFillTPA(TPA); Result:= tempATPA; SetLength(tempATPA, 0); end; function FindTPAEdges(const p: TPointArray): TPointArray; begin FindTPAEdgesWrap(p, result); end; Function RotatePoints(Const P: TPointArray; A, cx, cy: Extended): TPointArray; begin RotatePointsWrap(P, A, cx, cy, result); end; function TPAFromCircle(const CX, CY, Radius: Integer): TPointArray; begin TPAFromCircleWrap(CX, CY, Radius, result); end; function TPAFromEllipse(const CX, CY, XRadius, YRadius : Integer): TPointArray; begin TPAFromEllipseWrap(CX, CY, XRadius, YRadius, result); end; function TPAFromBox(const Box : TBox) : TPointArray; begin TPAFromBoxWrap(Box, result); end; Function ReturnPointsNotInTPA(Const TotalTPA: TPointArray; const Box: TBox): TPointArray; begin ReturnPointsNotInTPAWrap(TotalTPA, Box, result); end; function CombineIntArray(const Ar1, Ar2: TIntegerArray): TIntegerArray; begin CombineIntArrayWrap(Ar1, Ar2, result); end; function ReArrangeandShortenArray(const a: TPointArray; Dist: Integer): TPointArray; begin ReArrangeandShortenArrayWrap(a, Dist, result); end; function ReArrangeandShortenArrayEx(const a: TPointArray; w, h: Integer): TPointArray; begin ReArrangeandShortenArrayExWrap(a, w, h, result); end; function CombineTPA(const Ar1, Ar2: TPointArray): TPointArray; begin CombineTPAWrap(Ar1, Ar2, Result); end; function RemoveDistTPointArray(x, y, dist: Integer;const ThePoints: TPointArray; RemoveHigher: Boolean): TPointArray; begin RemoveDistTPointArrayWrap(x, y, dist, ThePoints, RemoveHigher, Result); end; function TPAFromText(const text, font: String; var w,h: Integer): TPointArray; begin TPAFromTextWrap(text, font, w, h, result); end; function GetColors(const Coords: TPointArray): TIntegerArray; begin GetColorsWrap(Coords, Result); end; function Explode(del, str: string): TStringArray; begin ExplodeWrap(del, str, Result); end; function MergeATPA(const ATPA : T2DPointArray): TPointArray; begin MergeATPAWrap(ATPA, Result); end; function SplitTPA(arr : TPointArray; dist : Integer) : T2DPointArray; begin SplitTPAWrap(arr, dist, result); end; function SplitTPAEx(arr : TPointArray; w, h : integer) : T2DPointArray; begin SplitTPAExWrap(Arr, w, h, result); end; function ClearTPAFromTPA(arP, ClearPoints : TPointArray) : TPointArray; begin ClearTPAFromTPAWrap(arP, ClearPoints, result); end; function TPAToATPAEx(arP : TPointArray; w, h : integer) : T2DPointArray; begin TPAtoATPAExWrap(arP, w, h, result); end; function TPAToATPA(arP : TPointArray; dist : Integer) : T2DPointArray; begin TPAtoATPAWrap(arP, dist, result); end; function FindGapsTPA(TPA : TPointArray; MinPixels : integer) : T2DPointArray; begin FindGapsTPAWrap(tpa, MinPixels, result); end; {$ENDIF}
  {$DEFINE SMART}
  {$I SRL-6/SRL.Simba}
  {$I SPS/lib/SPS-RS3.Simba}

///////////////////////////////////////////////////////////////////////
//                                                                   //
//                  Begin of user setup                              //
//                Fill in the fields below                           //
//                                                                   //
///////////////////////////////////////////////////////////////////////

Const
  SRLStats_Username = '';         // ***Leave blank if you don't have a stats account***
  SRLStats_Password = '';

  {Cooking Settings}
  CookingType  = 'Lobster';      // ***Input type of item to cook, for progress report only***

  {AntiBan Settings}
  Efficiency   = False;   // ***Minimal antiban settings, will find banker faster***

  {Break Settings}
  Breaks       = False;    // ***Take Breaks or no?***
  SwitchWorlds = False;    // ***Switch worlds after a break?***
  BreakIn      = 260;     // ***How long before we take a break? (minutes)***
  BreakFor     = 30;      // ***How long will we break for? (minutes)***
  Bir          = 40;      // ***Random minutes to add/subtract from how long until we break***
  Bfr          = 25;       // ***Random minutes to add/subjtract from break duraction***

Procedure DeclarePlayers;
Begin
  Players.Setup(['Player1'], 'PlayerList'); //***Fill this out, Player1 = Name of the account in player manager, PlayerList = name of the player file***
  SetLength(Players,1);

  //***If NOT using the player manager, fill out the loginname and password below, otherwise ignore those two***
  With players[0] Do
  Begin
  // loginName := '';      {Remove the "//" from this line if you arent using player manager}
  // password := '';       {Remove the "//" from this line if you arent using player manager}
    IsActive := True;
    World := 0;            //Enter desired world!
  End;
  CurrentPlayer := 0;
End;


///////////////////////////////////////////////////////////////////////////////////////////
//                                                                                       //
//                            End of user setup                                          //
//           Don't touch below this line unless you know what you're doing!!             //
//                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////

Var
  FailCount,XP,XPH,CookCount,CooksPH,StartingExperience: Integer;
  W,X,Y,Z,RealBTime,BreakRounds,TotalBreaks: Integer;
  CurrentBTime,OnMe: TTimeMarker;
  EarlyClick,GoHigh: Boolean;
  StartTime,CurrentTime: Int64;
  Trash: TVariantArray;
  Refresh: Integer;

Const
  ScriptVersion = '2.1';

  BankerHue=0.26;
  BankerSat=0.59;
  BankerTol=23;
  BankerCol=3496520;

  POSDebug=false;
  Debug = false;

{*******************************************************************************
Function AutoupdateMe;
By: Shuttleu
Edited By: Ashaman88
Description: Autoupdates Script.
*******************************************************************************}
Procedure AutoUpdateMe;
Var
  Neifile: Integer;
  OnlineVersion, NewScript, NeiFeilNennen: String;
Begin
  Writeln('Checking for script updates...');
  OnlineVersion := GetPage('http://roguedencooker.googlecode.com/git/Version.txt');
  Writeln('Online Version: '+ToStr(OnlineVersion));
  Writeln('Local Version: '+ToStr(ScriptVersion));
  If (trim(OnlineVersion) > ScriptVersion) Then
  Begin
    WriteLn('Newer script version online!');
    WriteLn('Autoupdating to newer version.');
    NewScript := GetPage('http://roguedencooker.googlecode.com/git/AshamanRoguesCooker.simba');
    NeiFeilNennen := ScriptPath+ 'AshamanRougesDen V'+OnlineVersion+'.simba';
    Neifile := Rewritefile(NeiFeilNennen, true);
    Try
      WriteFileString(Neifile, NewScript);
    Except
      Begin
        WriteLn('Fatal error writing to '+NeiFeilNennen+'!!');
        Terminatescript;
      End;
    End;
    CloseFile(Neifile);
    WriteLn('New script downloaded to '+NeiFeilNennen+'!! Please use this one!!');
    TerminateScript;
  End Else
    WriteLn('You have the latest version of the script!');
End;

function TRSChatBox.getXP: Integer;
var
  b: TBox;
  s: String;
  tpa : TPointArray;
  atpa : T2DPointArray;
  i,cts,p: Integer;
begin
  b := self.getBounds();
  b.edit(+(b.x2-b.x1)-140, +10, -5, -94);

  findColorsTolerance(tpa, 14013909, b, 4,colorSetting(2, 0.00, 0.00));

  if length(tpa) < 2 then
  begin
    print('chatBox.getXP(): No XP found', TDebug.SUB);
    Exit;
  end;

  atpa := tpa.cluster(5);

  b:= atpa.getbounds;
  b.edit(-2,-2,+2,+3);

  s:=Replace(tesseractgettext(b.x1,b.y1,b.x2,b.y2, FILTER_SMALL_CHARS), ' ', '', [rfReplaceAll]);

  P := Pos('x', S);
  if P > 0 then
    Result := StrToIntDef(ExtractFromStr(Copy(s, P, Length(S)), Numbers), 0)
  else
    Result := StrToIntDef(ExtractFromStr(S, Numbers), 0);

  print('chatBox.getXP(): XP found: ' + tostr(result), TDebug.SUB);
end;

Procedure QuickBoxSort(var A: TIntegerArray; var B: TBoxArray; iLo, iHi: Integer; SortUp: Boolean);
Var
  Lo, Hi, Mid, T: Integer;
  TP: TBox;
Begin
  If (Length(A) <> Length(B)) Then
    Exit;
  Lo := iLo;
  Hi := iHi;
  Mid := A[(Lo + Hi) shr 1];
  Repeat
    If SortUp Then
    Begin
      While (A[Lo] < Mid) Do Inc(Lo);
      While (A[Hi] > Mid) Do Dec(Hi);
    End Else
    Begin
      While (A[Lo] > Mid) Do Inc(Lo);
      While (A[Hi] < Mid) Do Dec(Hi);
    End;
    If (Lo <= Hi) Then
    Begin
      T := A[Lo];
      A[Lo] := A[Hi];
      A[Hi] := T;
      TP := B[Lo];
      B[Lo] := B[Hi];
      B[Hi] := TP;
      Inc(Lo);
      Dec(Hi);
    End;
  Until Lo > Hi;
  If (Hi > iLo) Then QuickBoxSort(A, B, iLo, Hi, SortUp);
  If (Lo < iHi) Then QuickBoxSort(A, B, Lo, iHi, SortUp);
End;


{*
  Sorts A TBoxArray by Mid-Point. Closest OverallBox by Midpoint to the From-Point First.
*}
Procedure MidSortBoxArrayFrom(Var BoxArray: TBoxArray; Const From: TPoint);
Var
   I,L: Integer;
   Mid: TPoint;
   DistArr: TIntegerArray;
Begin
  L := High(BoxArray);
  If (L < 0) Then
    Exit;
  SetLength(DistArr, L + 1);

  For I := 0 To L Do
  Begin
    Mid := MiddleBox(BoxArray[I]);
    DistArr[I] := Round(Sqr(From.X - Mid.X) + Sqr(From.Y - Mid.Y));
  End;

  QuickBoxSort(DistArr,BoxArray,0,l,True);
End;

Function FindNormalRandoms: Boolean;
Begin
  Result:= ExitSquealOfFortune Or ClaimSpinTicket;
End;

Function CheckStuff: Boolean;
var
  pt: tpoint;
  Trash: TVariantArray;
  Refresh: Integer;
Begin
  Result:=False;

  If Not IsLoggedIn Then
  Begin
    Players[CurrentPlayer].Login;
    Wait(RandomRange(3000,4000));
    Pt:=SPS.GetPlayerPOS;
  If Pt.Y > 173 Then
    Minimap.SetAngle(MM_DIRECTION_NORTH) Else
    Minimap.SetAngle(MM_DIRECTION_SOUTH);
    Mainscreen.SetAngle(MS_ANGLE_HIGH);
   // FixGraphicz;
    Result:=True;
  End;

  If FindNormalRandoms Then
  Begin
    If Not IsLoggedIn Then
      TerminateScript;
    Result:=True;
    EarlyClick:=False;
  End;
End;

procedure SetAngleMed(Angle: Integer);
begin
  if ((Angle = MS_ANGLE_NONE) or (not IsLoggedIn)) then
    Exit;

  KeyDown((Angle * 2) + 38);
  Sleep(100 + Random(100));
  KeyUp((Angle * 2) + 38);
  Wait(200 + Random(100));
end;

Function FindBurned: Integer;
Var
  I,X,Y: Integer;
  IBox: TBox;
Begin
  Result:=0;
  For I:=1 to 28 Do
  Begin
    IBox:=TabBackpack.GetSlotBox(I);
    If FindColorTolerance(X,Y,3684410,IBox.X1,IBox.Y1,IBox.X2,IBox.Y2,14) Then
      Inc(Result);
  End;
  If Not TabBackpack.IsFull Then
    If Result = 1 Then
      Result:= (28 - TabBackpack.Count) + 1;
End;

function TRSChooseOption.Selecter(txt: TStringArray): boolean; overload;
begin
  result := self._select(txt, MOUSE_Move, true, 1.00, 800);
end;

procedure mouseOffClient(Direction: Integer; Stay: Boolean);  overload;
var
  B: TBoxArray;
  P: TPoint;
  i, W, H,X,Y: Integer;
begin
  GetClientDimensions(W, H);
  GetMousePos(X,Y);
  if (X < 0) or (X > W) or (Y < 0) or (Y > H) then
     exit;

  SetLength(B, 4);

  B[OFF_CLIENT_TOP] := [-300, -300, W, 0]; // top
  B[OFF_CLIENT_BOTTOM] := [0, H, W, H +300];  // bottom
  B[OFF_CLIENT_LEFT] := [0-300, 0, 0, H];   // left
  B[OFF_CLIENT_RIGHT] := [W, 0, W +300, H];  // right

  if (Direction = OFF_CLIENT_RANDOM) then
    i := Random(4)
  else
    i := Direction;

  P := Point(RandomRange(B[i].X1, B[i].X2), RandomRange(B[i].Y1, B[i].Y2));
  Mouse(Point(P.X, P.Y), MOUSE_MOVE);
end;

Procedure ProgressReport;
Var
  TTB: Integer;
Begin
  If (Not Debug) Then
    ClearDebug;

  TTB := (((W) + (Y) + BreakRounds)-GetTimeRunning);

  CookCount := (CookCount +28 -FindBurned);
  XP := (ChatBox.GetXP-StartingExperience);
  XPH := Round(XP * (3600.0 / (GetTimeRunning / 1000.0)));
  CooksPH := Round((CookCount * (3600.0 / (GetTimeRunning / 1000.0))));

  Writeln('=========AshamanRoguesCooker v'+ScriptVersion+'=========');
  Writeln('Time Running: ' + ToStr(TimeRunning));
  Writeln(CookingType+' Cooked: ' + IntToStr(CookCount));
  Writeln('Experience Earned: ' + IntToStr(XP));
  Writeln('Experience/Hour: ' + ToStr(XPH));
  Writeln(CookingType+'/H: ' + ToStr(CooksPH));
  Writeln('==========================================');

  If Breaks Then
    Writeln('Time until break: '+MsToTime(TTB, Time_Bare));

  StatsCommit;
End;

Function FindBanker(Select: Boolean = True): Boolean;
Var
  X,Y,H,I,CTS: Integer;
  T: TTimeMarker;
  TPA: TPointArray;
  ATPA: T2DPointArray;
Begin
  If Not IsLoggedIn Then
    Exit;

  CheckStuff;

  If (ChooseOption.OptionsExist(['Exam','mine','Examine','Canc','ncel','Cancel'],400)) Then
  Begin
    If Debug Then
      Writeln('Closing options menu');
    MouseBox(TabBackpack.GetBounds,Mouse_Move);
  End;

  If OnMe.GetTime>10000 Then
  Begin
    OnMe.Reset;
    OnMe.Start;
    Mouse(Mainscreen.PlayerPoint,Mouse_Move);
    If (IsMouseOverText(['Emerald Benedict', 'rald', 'dic', 'ene', 'mera'], RandomRange(250,300))) Then
    Begin
      If Debug Then
        Writeln('Found banker uptext, clicking');

      FastClick(Mouse_Right);

      If Not Select Then
        If ChooseOption.Selecter(['Bank']) Then
        Begin
          Result:=True;
          Exit;
        End;

      If ChooseOption.Select(['Bank'],900) Then
      Begin
        If GoHigh Then
          Mainscreen.SetAngle(MS_ANGLE_HIGH);

        T.Start;
        Repeat
          Wait(Random(100));
          If (T.GetTime > 10000) Then
            Exit;
          If CheckStuff Then
            Exit;
        Until(BankScreen.IsOpen) Or (PinScreen.IsOpen);
        Result:= True;
        OnMe.Reset;
        OnMe.Start;
        Exit;
      End;
    End;
  End;

  findColorsTolerance(tpa, BankerCol, Mainscreen.GetBounds, BankerTol,colorSetting(2, BankerHue,BankerSat));

  ATPA:= TPA.Cluster(10);
  atpa.filterBetween(0,60)

  If (Length(ATPA) = 0) Then
    Exit;

  ATPA.SortBySize;

  SmartImage.DebugATPA(ATPA);

  H := High(ATPA);

  For I := 0 To H Do
  Begin
    If Debug Then
      Writeln('Banker Length: '+ToStr(Length(ATPA[I])));

    MiddleTPAEx(ATPA[I],X,Y);
    Mouse(X,Y,5,8);

    If (IsMouseOverText(['Emerald Benedict', 'rald', 'dic', 'ene', 'mera'], RandomRange(0,10))) Then
    Begin
      FastClick(Mouse_Right);

      If Not Select Then
        If ChooseOption.Selecter(['Bank']) Then
        Begin
          Result:=True;
          SmartImage.Clear;
          OnMe.Reset;
          OnMe.Start;
          SetLength(ATPA,0);
          SetLength(TPA,0);
          Exit;
        End;

      If ChooseOption.Select(['Bank'],900) Then
      Begin
        If GoHigh Then
          Mainscreen.SetAngle(MS_ANGLE_HIGH);

        SmartImage.Clear;

        T.Start;
        Repeat
          Wait(Random(100));
          If (T.GetTime > 10000) Then
            Exit;
          If CheckStuff Then
            Exit;
        Until(BankScreen.IsOpen) Or (PinScreen.IsOpen);
        SetLength(ATPA,0);
        SetLength(TPA,0);
        Result:= True;
        OnMe.Reset;
        OnMe.Start;
        Exit;
      End;
    End;
  End;
  SetLength(ATPA,0);
  SetLength(TPA,0);
End;

function waitBanker(Select: Boolean=True; WaitPerLoop, MaxTime: Integer): Boolean;
var
  T: Integer;
begin
  T := GetSystemTime() + MaxTime;
  while (GetSystemTime() < T) do
  begin
    if (FindBanker(Select)) then
    begin
      Result := True;
      Exit;
    end;
    Wait(WaitPerLoop);
  end;
end;

Function Antiban(EarlyBanker: Boolean): Boolean;
Var
  I: Integer;
  Pt: Tpoint;
Begin
  Pt:=SPS.GetPlayerPOS;
  If (EarlyBanker) And (Not EarlyClick) Then
  Begin
    If WaitBanker(False,100,RandomRange(1000,1200)) Then
    Begin
      EarlyClick:=True;
      Exit;
    End Else
    Begin
      If Pt.Y > 173 Then
        Minimap.SetAngle(MM_DIRECTION_NORTH) Else
        Minimap.SetAngle(MM_DIRECTION_SOUTH);
      If OnMe.GetTime>10000 Then
      Begin
        MouseBox(Mainscreen.playerBox,Mouse_Right);
        If (IsMouseOverText(['Emerald Benedict', 'rald', 'dic', 'ene', 'mera'], RandomRange(250,300))) Then
        Begin
          If Debug Then
            Writeln('Found banker uptext, clicking');
          FastClick(Mouse_Right);
          If ChooseOption.Selecter(['Bank']) Then
          Begin
            EarlyClick:=True;

            OnMe.Reset;
            OnMe.Start;
            Exit;
          End;
        End;
      End Else
        Wait(Random(100));
      //CompassMovement(20,280,False);
      Exit;
    End;
  End Else
    If Pt.Y > 173 Then
        Minimap.SetAngle(MM_DIRECTION_NORTH) Else
        Minimap.SetAngle(MM_DIRECTION_SOUTH);
  I := Random(600);
  Case I Of
    1..3:
      Begin
        RandomRClickitem;
      End;
    4..7:
      Begin
        hoverSkill(SKILL_COOKING);
        TabBackpack.Open;
      End;
    8..11:
      Begin
        mousemovingobject;
      End;
    12..200:
      Begin
        SleepAndMoveMouse(RandomRange(100,2000));
        Result:=True;
      End;
    201..400:
      Begin
        Wait(RandomRange(250, 1500));
        MouseOffClient(4,True);
        Wait(RandomRange(3000, 6000));
        Result:=True;
      End;
    401..600:
      Begin
        Wait(RandomRange(250, 4000));
        Result:=True;
      End;
  End;
  Wait(RandomRange(2000, 5500));
End;

Procedure CookWait;
Var
  InitialColors,InitialColors2: TIntegerArray;
  ColorPoints,ColorPoints2: TPointArray;
  P: TPoint;
  Ave,Ave2: Integer;
  Inv,Inv2: TBox;
  T: TTimeMarker;
Begin
  P:=SPS.GetPlayerPOS;
  If P.Y > 173 Then
    Minimap.SetAngle(MM_DIRECTION_NORTH) Else
    Minimap.SetAngle(MM_DIRECTION_SOUTH);

  T.Start;
  EarlyClick:=False;

  Inv:=TabBackpack.GetSlotBox(28);
  Inv.Edit(+5,+5,-5,-5);

  InitialColors:= Inv.GetColors;
  Ave:=InitialColors.Average;
  SetLength(InitialColors,0);

  Inv2:=TabBackpack.GetSlotBox(GaussRangeInt(20,28));
  Inv2.Edit(+5,+5,-5,-5);

  InitialColors2:= Inv2.GetColors;
  Ave2:=InitialColors2.Average;
  SetLength(InitialColors2,0);

  Repeat
    Wait(Random(100));
    If CheckStuff Then
      Exit;
    SetLength(InitialColors,0);
    SetLength(InitialColors2,0);
    InitialColors:= Inv.GetColors;
    If Ave<>InitialColors.Average Then
    Begin
      SetLength(InitialColors,0);
      Break;
    End Else
      If Not EarlyClick Then
      Begin
        InitialColors2:= Inv2.GetColors;
        If Ave2<>InitialColors2.Average Then
          AntiBan(True) Else
          If Efficiency Then
            AntiBan(True) Else
            AntiBan(False);
      End;
    If (T.GetTime > 70000) Then
      Exit;
  Until Not IsLoggedIn;
  ProgressReport;
  OnMe.Reset;
  OnMe.Start;
  Wait(Random(500));
End;

Function BreakHandler(BreakIn, BreakFor, randBreakIn, randBreakFor: Integer): Boolean;
Var
  H,M,S: Integer;
Begin
  If Not IsLoggedIn Then
    Exit;

  If (GetTimeRunning < ((W) + (Y) + BreakRounds)) Then
    Exit Else
    If (GetTimeRunning > ((W) + (Y) + BreakRounds)) Then
    Begin
      RealBTime := Round((X+Z)/60000);
      Writeln('Taking a break for about ' + IntToStr(RealBTime) + ' minutes.');
      Players[CurrentPlayer].Logout;
      CurrentBTime.Reset;
      CurrentBTime.Start;
      Repeat
        Wait(21000);
        ConvertTime((X+Z)-CurrentBTime.GetTime,H,M,S);
        Writeln('Breaktime left: '+IntToStr(H)+':'+IntToStr(M)+':'+IntToStr(S));
      Until(CurrentBTime.GetTime>(X+Z));
      Writeln('Logging in.');
      Players[CurrentPlayer].Login;
      Wait(4000);
      Result := IsLoggedIn;
      Minimap.ClickCompass;
      MainScreen.SetAngle(MS_ANGLE_HIGH);
      IncEx(BreakRounds, (W) + (X));
      Inc(TotalBreaks);
      Writeln('The next break will occur in about ' + IntToStr(BreakIn) + ' minutes.');
      W := (BreakIn * 60000);
      X := (BreakFor * 60000);
      Y := RandomRange(-BIR * 60000, BIR * 60000);
      Z := RandomRange(-BFR * 60000, BFR * 60000);
    End;
End;

Function WaitPixelChange(Time:Integer):Boolean;
Var
  First,Second:Integer;
  ColorPoints: TPointArray;
  InitialColors: TIntegerArray;
  Inv: TBox;
  Ave: Integer;
  T: TTimeMarker;
Begin
  First := ChatBox.GetXP;

  Inv:=TabBackpack.GetSlotBox(1);
  Inv.Edit(+5,+5,-5,-5);

  InitialColors:= Inv.GetColors;
  Ave:=InitialColors.Average;
  SetLength(InitialColors,0);

  T.Start;
  Repeat
    Wait(Random(100));
    Second := ChatBox.GetXP;
    SetLength(InitialColors,0);
    InitialColors:= Inv.GetColors;
    If Ave<>InitialColors.Average Then
      Break;
    If T.GetTime > Time Then
    Begin
      Result := False;
      Exit;
    End;
  Until(Second > First);
  Result := True;
End;

Procedure Banking;
Var
  I: Integer;
Begin
  If Not IsLoggedIn Then
    Exit;

  If CheckStuff Then
    Exit;

  PinScreen.Enter(Players[CurrentPlayer].BankPin);

  Wait(Random(100));

  If BankScreen.GetPackCount > 0 Then
    BankScreen.QuickDeposit(QUICK_DEPOSIT_INVENTORY);

  For I:=0 To 3 Do
    If BankScreen.Withdraw(10, WITHDRAW_AMOUNT_ALL, ['']) Then
      Break;

  Wait(Random(100));
  BankScreen.Close;
  Wait(Random(100));
  TabBackpack.MouseSlot(1,Mouse_Move);
  OnMe.Reset;
  OnMe.Start;
End;


Procedure WalkToFire;
Var
  SpotDTM: Integer;
  T: TTimeMarker;
  P: TPoint;
  aFound: Extended;
Begin
  If Not IsLoggedIn Then
    Exit;

  CheckStuff;

  If Not SPS.WalkToPos(Point(154,162)) Then
    If Minimap.FindSymbol(P,MM_SYMBOL_BANK,Minimap.GetBounds) Then
    Begin
      Mouse(P,Mouse_Left);

      Wait(RandomRange(1000,1340));
      T.Start;
      Repeat
        Wait(Random(100));
        If T.GetTime>8000 Then
          Break;
        If CheckStuff Then
          Break;
        If Not IsLoggedIn Then
          Break;
      Until Not Minimap.IsPlayerMoving;
    End;
End;

Function SkillMenu(Skill: String; WaitTime: Integer = 4000): Boolean;
var
  t: TTimeMarker;
  b: TBox;
  s: String;
  tpa : TPointArray;
  atpa : T2DPointArray;
begin
  b := [237,35,366,57];

  T.Start;
  Repeat
    If not isloggedIn Then
      Exit;

    findColorsTolerance(tpa, 697806, b, 63,colorSetting(0));

    if length(tpa) < 100 then
      Exit;

    atpa := tpa.cluster(5);

    b:= atpa.getbounds;
    b.edit(-2,-2,+2,+2);
    b.setlimit(mainscreen.getbounds);

    s:=Replace(tesseractgettext(b.x1,b.y1,b.x2,b.y2, FILTER_SMALL_CHARS), ' ', '', [rfReplaceAll]);
    result:=(pos(lowercase(Skill), lowercase(s)) > 0);
  Until (Result) or (T.GetTime>WaitTime);
End;

Function FindFire:Boolean;
Var
  X,Y,H,I,XP: Integer;
  T: TTimeMarker;
  B: TBox;
  TBA: TBoxArray;
  MBP: TPoint;
  TPA: TPointArray;
  ATPA: T2DPointArray;
Begin
  If Not IsLoggedIn Then
    Exit;

  CheckStuff;

  T.Start;
  Repeat
    If (T.GetTime>5000) And (TabBackpack.IsEmpty) Then
      Exit;
    If (T.GetTime > 10000) Then
    Begin
      Writeln('We Are Low On Materials Terminating');
      Writeln('Screenshot saved, send to Ashaman if you''re not really out of fish!');
      SaveScreenshot(ScriptPath + '/fail_.bmp');
      Players[CurrentPlayer].Logout;
      TerminateScript();
    End;
    If CheckStuff Then
      Exit;
    Wait(Random(200));
  Until (TabBackpack.IsItemInSlot(28));

  Wait(Random(100));

  XP:=ChatBox.GetXP;

  If Not TabBackpack.IsSlotActivated(1) Then
  Begin
    if debug then
      writeln('no white');
    For I:=1 To 28 Do
    Begin
      If ChatBox.GetXP > XP Then
        CookWait;
      TabBackpack.MouseSlot(I,Mouse_Move);

      If Not (IsMouseOverText(['Use'])) Then
        Continue;

      FastClick(Mouse_Left);

      T.Start;
      Repeat
        Wait(Random(100));
        If T.GetTime>6000 Then
          Exit;
        If CheckStuff Then
          Exit;
      Until (TabBackpack.IsSlotActivated(I));
      If T.GetTime<6000 Then
        Break;
    End;

  End Else
    If Debug Then
      Writeln('white found');

  findColorsTolerance(tpa, 3454170, Mainscreen.GetBounds, 14,colorSetting(2, 0.22,2.08)); //orangey

  atpa := tpa.cluster(10);
  atpa.filterBetween(0, 5);

  setlength(tpa,0);

  If (Length(ATPA) = 0) Then
    Exit;

  ATPA.SortBySize;

  If Debug Then
    SmartImage.DebugATPA(ATPA);

  H := High(ATPA);

  For I := 0 to H Do
  Begin
    If Debug Then
      Writeln('Outer Fire Length: '+ToStr(Length(ATPA[I])));

    B := GetTPABounds(ATPA[I]);
    B.Edit(-5,-5,+5,+5);
    B.SetLimit(Mainscreen.GetBounds);

    With B Do
    Begin
      findColorsTolerance(tpa, 340286, B, 2,colorSetting(2,0.19,0.80)); //brown

      If (Length(TPA) > 15) Then
      Begin
        If Debug Then
          Writeln('Inner Fire Length: '+ToStr(Length(TPA)));

        B.Edit(+5,+5,-5,-5);
        B.SetLimit(Mainscreen.GetBounds);

        SetArrayLength(TBA, Length(TBA)+1);
        TBA[High(TBA)] := B;
      End;
    End;
  End;

  SmartImage.DrawBoxes(TBA,False,clRed);

  MidSortBoxArrayFrom(TBA,Mainscreen.PlayerPoint);

  For H := 0 To High(TBA) Do
  Begin
    MBP := MiddleBox(TBA[H]);
    Mouse(MBP.X, MBP.Y,GaussRangeInt(-5,5),GaussRangeInt(-5,5));

    If (IsMouseOverText(['Use Raw','se Ra','option'], RandomRange(1000,2500))) Then
    Begin
      FastClick(Mouse_Right);
      If ChooseOption.Select(['> Fire'],800) Then
      Begin
        SmartImage.Clear;
        Wait(Random(100));
        MouseBox(IntToBox(293,332,505,348),Mouse_Move,Mouse_Break);
        T.Reset;
        T.Start;
        Repeat
          Wait(Random(100));
          If SkillMenu('cooking',RandomRange(5000,5555)) Then
          Begin
            Wait(Random(100));
            GetMousePos(X,Y);
            MultiClick(Point(X,Y),50,2);
            Result:=True;
            Break;
          End;
          If T.GetTime>8000 Then
            Break;
        Until Not IsLoggedIn;

        If T.GetTime>8000 Then
          Continue;

        If (Not(WaitPixelChange(6000))) Then
        Begin
          Result:=False;
          SetLength(TPA,0);
          SetLength(ATPA,0);
          SetLength(TBA,0);
          Exit;
        End Else
        Begin
          SetLength(TPA,0);
          SetLength(ATPA,0);
          SetLength(TBA,0);
          Exit;
        End;
      End;
    End;
  End;
  SetLength(TPA,0);
  SetLength(ATPA,0);
  SetLength(TBA,0);
End;

Procedure Mainloop;
Var
  T: TTimeMarker;
  P: TPoint;
Begin
  If Not IsLoggedIn Then
    Exit;

  If Breaks Then
    BreakHandler(BreakIn,BreakFor,Bir,Bfr);

  If EarlyClick Then
  Begin
    EarlyClick:=False;
    If ChooseOption.OptionsExist(['Bene','dict']) Then
    Begin
      FastClick(Mouse_Left);
      T.Start;
      Repeat
        Wait(Random(100));
        If (T.GetTime > 10000) Then
          Exit;
        If CheckStuff Then
          Exit;
      Until(BankScreen.IsOpen) Or (PinScreen.IsOpen);
    End;
  End Else
    If (Not(WaitBanker(,1,RandomRange(3000,4000)))) Then
    Begin
      If Not IsLoggedIn Then
        Exit;
      P:=SPS.GetPlayerPOS;
      Case P.Y Of
        0..172:
        Begin
          CheckStuff;
          Minimap.SetAngle(MM_DIRECTION_SOUTH);
          SetAngleMed(MS_ANGLE_LOW);
          GoHigh:=True;
        End;
        173..300:
        Begin
          CheckStuff;
          Minimap.SetAngle(MM_DIRECTION_NORTH);
          SetAngleMed(MS_ANGLE_LOW);
          GoHigh:=True;
        End;
      End;
      FailCount:=FailCount+1;
      If FailCount>3 Then
      Begin
        WalkToFire;
        FailCount:=0;
      End;
    End Else
      FailCount:=0;

  EarlyClick:=False;

  If (BankScreen.IsOpen) Or (PinScreen.IsOpen) Then
  Begin
    Banking;
    If Not WaitFunc(@FindFire,1,RandomRange(2200,3000)) Then
    Begin
      WalkToFire;
      Mainscreen.SetAngle(MS_ANGLE_HIGH);
      GoHigh:=False;
      If FindFire Then
        CookWait;
    End Else
      CookWait;
  End;
End;

Procedure Setup;
Var
  Pt: Tpoint;
Begin
  SmartEnableDrawing := True;
  ClearDebug;

  AutoUpdateMe;

  SPSAnyAngle:=True;
  SetupSRL;

  StatsSetup(1365, SRLStats_Username, SRLStats_Password);

  DeclarePlayers;
  If Not IsLoggedIn Then
  Begin
    If Not Players[CurrentPlayer].Login Then
      TerminateScript;
    Wait(RandomRange(1000,2000));
  End;

  DisableSRLDebug:=True;

  If conversationBox.continue(true, true) Then
    Wait(RandomRange(1000,2000));


  Mainscreen.SetAngle(MS_ANGLE_HIGH);
  SPS.Setup('0_0RD', 'Runescape_Surface\');

  Pt:=SPS.GetPlayerPOS;
  If Pt.Y > 173 Then
    Minimap.SetAngle(MM_DIRECTION_NORTH) Else
    Minimap.SetAngle(MM_DIRECTION_SOUTH);

  StartingExperience := ChatBox.GetXP;

  OnMe.Start;

  W := (BreakIn * 60000);
  X := (BreakFor * 60000);
  Y := RandomRange(-BIR * 60000, BIR * 60000);
  Z := RandomRange(-BFR * 60000, BFR * 60000);
End;

Begin
  Setup;
  Repeat
    If POSDebug Then
      Writeln(SPS.GetPlayerPOS)Else
      Mainloop;
    If Not IsLoggedIn Then
    Begin
      If Not Players[CurrentPlayer].Login Then
        TerminateScript;
      Wait(RandomRange(3000,5000));
      Mainscreen.SetAngle(MS_ANGLE_HIGH);
    End;
  Until(Players.GetActive() = 0);
End.
